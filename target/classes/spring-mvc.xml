<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation=" 
                http://www.springframework.org/schema/beans 
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
                http://www.springframework.org/schema/context 
                http://www.springframework.org/schema/context/spring-context-3.1.xsd 
                http://www.springframework.org/schema/mvc 
                http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd" >
    
    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
     <mvc:annotation-driven /> 
    <!-- SpringMVC的扫描范围 -->
    <context:component-scan base-package="cn.qnight.controller" ></context:component-scan>    
    
    <!-- 默认访问跳转到登录页面，即定义无Controller的path<->view直接映射 -->
   <!--  <mvc:view-controller path="/" view-name="redirect:/login"/>  -->
    
    
    <!-- 静态文件访问 -->
    <!-- <mvc:resources mapping="/resources/**" location="/resources/" /> -->
    
    <!-- 用于返回json格式 -->
   <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
        <property name="supportedMediaTypes">    
            <list>
                <value>application/x-www-form-urlencoded;charset=UTF-8</value>
            </list>
        </property>
    </bean> 
 
     <!-- 完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
         <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    
    <!-- 配置SpringMVC的视图解析器 --> 
    <!-- 其viewClass属性的默认值就是org.springframework.web.servlet.view.JstlView -->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> -->
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- 总错误处理-->
     <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <!-- <property name="defaultErrorView">
            <value>/base/error</value>
        </property> -->
        <property name="defaultStatusCode">
            <value>500</value>
        </property>
        <property name="warnLogCategory">
            <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>  
        </property>
    </bean>
    
    <mvc:interceptors>  
    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->  
    <mvc:interceptor>  
        <mvc:mapping path="/**"/> 
        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->  
        <bean class="cn.qnight.Interceptor.LoginInterceptor"/>  
    </mvc:interceptor>  
</mvc:interceptors>  
    
    <!-- 静态资源加载 -->
    <mvc:resources location="/css/" mapping="/css/**" />
    <!-- <mvc:view-controller path="/" view-name="redirect:WEB-INF/view/index.html" /> -->
    <mvc:resources location="/images/" mapping="/images/**" />
    <mvc:resources location="/js/" mapping="/js/" />
    <mvc:resources location="/bj/" mapping="/bj/" />
    <mvc:resources location="/lib/" mapping="/lib/**" />
    <mvc:resources location="/upload/" mapping="/upload/**" />
    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxInMemorySize" value="10240000"></property>
    </bean>
</beans>